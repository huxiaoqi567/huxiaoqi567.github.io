<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes"/>
    <meta name="apple-mobile-web-app-status-bar-style" content="black"/>
    <meta name="format-detection" content="telephone=no"/>
    <link rel="shortcut icon" href="https://gw.alicdn.com/tfs/TB11pN5dH9YBuNjy0FgXXcxcXXa-64-64.png" type="image/png" />
    <link rel="apple-touch-icon" sizes="64x64" href="https://gw.alicdn.com/tfs/TB11pN5dH9YBuNjy0FgXXcxcXXa-64-64.png"/>
    <link rel="manifest" href="manifest.json"/>

    <title>Lazada Demo</title>
    <script src="https://unpkg.com/web-rax-framework@0.5.4/dist/framework.web.js"></script>

    <style>
        *{
            margin:0;
            padding:0;
        }
    </style>
</head>
<body>
<script src="/build/pages/index/index.bundle.js"></script>
<script>


    function urlB64ToUint8Array (base64String) {
      var padding = '='.repeat((4 - base64String.length % 4) % 4);
      var base64 = (base64String + padding)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');

      var rawData = window.atob(base64);
      var outputArray = new Uint8Array(rawData.length);

      for (var i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
      }
      return outputArray;
    };

  function subscribeUser(swRegistration) {
    const applicationServerPublicKey = "{{publicKey}}";
    const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);
    swRegistration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: applicationServerKey
    })
    // 用户同意
      .then(function(subscription) {
        console.log('User is subscribed:', JSON.stringify(subscription));

        fetch('/addSubscription',{
                 method: "POST",
                 body:{subscription: JSON.stringify(subscription)}
        }).then((res)=>{
            console.log(res);
        })

      })
      // 用户不同意或者生成失败
      .catch(function(err) {
        console.log('Failed to subscribe the user: ', err);
      });
  }

  if ('serviceWorker' in navigator) {

    window.addEventListener('load', function () {
      navigator.serviceWorker.register('sw.js?v={{random}}')
        .then(function (registration) {

          if (window.PushManager) {
            registration.pushManager.getSubscription().then(subscription => {
              // 如果用户没有订阅
              if (!subscription) {
                subscribeUser(registration);
              } else {
                console.log("You have subscribed our notification",subscription);
              }
            });
          }

          // 注册成功
          console.log('ServiceWorker registration successful with scope: ', registration.scope);
        })
        .catch(function (err) {

          // 注册失败:(
          console.log('ServiceWorker registration failed: ', err);
        });
    });
  }
</script>
</body>
</html>